// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { SendEmailData, SendEmailError, SendEmailResponse2, SendEmailBatchData, SendEmailBatchError, SendEmailBatchResponse2, GetDeliveryStatsData, GetDeliveryStatsError, GetDeliveryStatsResponse, GetBouncesData, GetBouncesError, GetBouncesResponse, GetSingleBounceData, GetSingleBounceError, GetSingleBounceResponse, GetBouncesByBounceidDumpData, GetBouncesByBounceidDumpError, GetBouncesByBounceidDumpResponse, ActivateBounceData, ActivateBounceError, ActivateBounceResponse, SearchOutboundMessagesData, SearchOutboundMessagesError, SearchOutboundMessagesResponse, GetOutboundMessageDetailsData, GetOutboundMessageDetailsError, GetOutboundMessageDetailsResponse, GetOutboundMessageDumpData, GetOutboundMessageDumpError, GetOutboundMessageDumpResponse, SearchInboundMessagesData, SearchInboundMessagesError, SearchInboundMessagesResponse, GetInboundMessageDetailsData, GetInboundMessageDetailsError, GetInboundMessageDetailsResponse, BypassRulesForInboundMessageData, BypassRulesForInboundMessageError, BypassRulesForInboundMessageResponse, RetryInboundMessageProcessingData, RetryInboundMessageProcessingError, RetryInboundMessageProcessingResponse, SearchOpensForOutboundMessagesData, SearchOpensForOutboundMessagesError, SearchOpensForOutboundMessagesResponse, GetOpensForSingleOutboundMessageData, GetOpensForSingleOutboundMessageError, GetOpensForSingleOutboundMessageResponse, SearchClicksForOutboundMessagesData, SearchClicksForOutboundMessagesError, SearchClicksForOutboundMessagesResponse, GetClicksForSingleOutboundMessageData, GetClicksForSingleOutboundMessageError, GetClicksForSingleOutboundMessageResponse, SendEmailWithTemplateData, SendEmailWithTemplateError, SendEmailWithTemplateResponse, SendEmailBatchWithTemplatesData, SendEmailBatchWithTemplatesError, SendEmailBatchWithTemplatesResponse, ListTemplatesData, ListTemplatesError, ListTemplatesResponse, PostTemplatesData, PostTemplatesError, PostTemplatesResponse, GetSingleTemplateData, GetSingleTemplateError, GetSingleTemplateResponse, UpdateTemplateData, UpdateTemplateError, UpdateTemplateResponse, DeleteTemplateData, DeleteTemplateError, DeleteTemplateResponse, TestTemplateContentData, TestTemplateContentError, TestTemplateContentResponse, GetOutboundOverviewStatisticsData, GetOutboundOverviewStatisticsError, GetOutboundOverviewStatisticsResponse, GetSentCountsData, GetSentCountsError, GetSentCountsResponse, GetBounceCountsData, GetBounceCountsError, GetBounceCountsResponse, GetSpamComplaintsData, GetSpamComplaintsError, GetSpamComplaintsResponse, GetTrackedEmailCountsData, GetTrackedEmailCountsError, GetTrackedEmailCountsResponse, GetOutboundOpenCountsData, GetOutboundOpenCountsError, GetOutboundOpenCountsResponse, GetOutboundOpenCountsByPlatformData, GetOutboundOpenCountsByPlatformError, GetOutboundOpenCountsByPlatformResponse, GetOutboundOpenCountsByEmailClientData, GetOutboundOpenCountsByEmailClientError, GetOutboundOpenCountsByEmailClientResponse, GetOutboundClickCountsData, GetOutboundClickCountsError, GetOutboundClickCountsResponse, GetOutboundClickCountsByBrowserFamilyData, GetOutboundClickCountsByBrowserFamilyError, GetOutboundClickCountsByBrowserFamilyResponse, GetOutboundClickCountsByPlatformData, GetOutboundClickCountsByPlatformError, GetOutboundClickCountsByPlatformResponse, GetOutboundClickCountsByLocationData, GetOutboundClickCountsByLocationError, GetOutboundClickCountsByLocationResponse, ListInboundRulesData, ListInboundRulesError, ListInboundRulesResponse, CreateInboundRuleData, CreateInboundRuleError, CreateInboundRuleResponse, DeleteInboundRuleData, DeleteInboundRuleError, DeleteInboundRuleResponse, GetCurrentServerConfigurationData, GetCurrentServerConfigurationError, GetCurrentServerConfigurationResponse, EditCurrentServerConfigurationData, EditCurrentServerConfigurationError, EditCurrentServerConfigurationResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Send a single email
 */
export const sendEmail = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SendEmailData, ThrowOnError>) => {
    return (options?.client ?? client).post<SendEmailResponse2, SendEmailError, ThrowOnError>({
        ...options,
        url: '/email'
    });
};

/**
 * Send a batch of emails
 */
export const sendEmailBatch = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SendEmailBatchData, ThrowOnError>) => {
    return (options?.client ?? client).post<SendEmailBatchResponse2, SendEmailBatchError, ThrowOnError>({
        ...options,
        url: '/email/batch'
    });
};

/**
 * Get delivery stats
 */
export const getDeliveryStats = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetDeliveryStatsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDeliveryStatsResponse, GetDeliveryStatsError, ThrowOnError>({
        ...options,
        url: '/deliverystats'
    });
};

/**
 * Get bounces
 */
export const getBounces = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetBouncesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBouncesResponse, GetBouncesError, ThrowOnError>({
        ...options,
        url: '/bounces'
    });
};

/**
 * Get a single bounce
 */
export const getSingleBounce = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetSingleBounceData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSingleBounceResponse, GetSingleBounceError, ThrowOnError>({
        ...options,
        url: '/bounces/{bounceid}'
    });
};

/**
 * Get bounce dump
 */
export const getBouncesByBounceidDump = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetBouncesByBounceidDumpData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBouncesByBounceidDumpResponse, GetBouncesByBounceidDumpError, ThrowOnError>({
        ...options,
        url: '/bounces/{bounceid}/dump'
    });
};

/**
 * Activate a bounce
 */
export const activateBounce = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ActivateBounceData, ThrowOnError>) => {
    return (options?.client ?? client).put<ActivateBounceResponse, ActivateBounceError, ThrowOnError>({
        ...options,
        url: '/bounces/{bounceid}/activate'
    });
};

/**
 * Outbound message search
 */
export const searchOutboundMessages = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SearchOutboundMessagesData, ThrowOnError>) => {
    return (options?.client ?? client).get<SearchOutboundMessagesResponse, SearchOutboundMessagesError, ThrowOnError>({
        ...options,
        url: '/messages/outbound'
    });
};

/**
 * Outbound message details
 */
export const getOutboundMessageDetails = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetOutboundMessageDetailsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOutboundMessageDetailsResponse, GetOutboundMessageDetailsError, ThrowOnError>({
        ...options,
        url: '/messages/outbound/{messageid}/details'
    });
};

/**
 * Outbound message dump
 */
export const getOutboundMessageDump = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetOutboundMessageDumpData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOutboundMessageDumpResponse, GetOutboundMessageDumpError, ThrowOnError>({
        ...options,
        url: '/messages/outbound/{messageid}/dump'
    });
};

/**
 * Inbound message search
 */
export const searchInboundMessages = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SearchInboundMessagesData, ThrowOnError>) => {
    return (options?.client ?? client).get<SearchInboundMessagesResponse, SearchInboundMessagesError, ThrowOnError>({
        ...options,
        url: '/messages/inbound'
    });
};

/**
 * Inbound message details
 */
export const getInboundMessageDetails = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetInboundMessageDetailsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetInboundMessageDetailsResponse, GetInboundMessageDetailsError, ThrowOnError>({
        ...options,
        url: '/messages/inbound/{messageid}/details'
    });
};

/**
 * Bypass rules for a blocked inbound message
 */
export const bypassRulesForInboundMessage = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<BypassRulesForInboundMessageData, ThrowOnError>) => {
    return (options?.client ?? client).put<BypassRulesForInboundMessageResponse, BypassRulesForInboundMessageError, ThrowOnError>({
        ...options,
        url: '/messages/inbound/{messageid}/bypass'
    });
};

/**
 * Retry a failed inbound message for processing
 */
export const retryInboundMessageProcessing = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RetryInboundMessageProcessingData, ThrowOnError>) => {
    return (options?.client ?? client).put<RetryInboundMessageProcessingResponse, RetryInboundMessageProcessingError, ThrowOnError>({
        ...options,
        url: '/messages/inbound/{messageid}/retry'
    });
};

/**
 * Opens for all messages
 */
export const searchOpensForOutboundMessages = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SearchOpensForOutboundMessagesData, ThrowOnError>) => {
    return (options?.client ?? client).get<SearchOpensForOutboundMessagesResponse, SearchOpensForOutboundMessagesError, ThrowOnError>({
        ...options,
        url: '/messages/outbound/opens'
    });
};

/**
 * Retrieve Message Opens
 */
export const getOpensForSingleOutboundMessage = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetOpensForSingleOutboundMessageData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOpensForSingleOutboundMessageResponse, GetOpensForSingleOutboundMessageError, ThrowOnError>({
        ...options,
        url: '/messages/outbound/opens/{messageid}'
    });
};

/**
 * Clicks for a all messages
 */
export const searchClicksForOutboundMessages = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SearchClicksForOutboundMessagesData, ThrowOnError>) => {
    return (options?.client ?? client).get<SearchClicksForOutboundMessagesResponse, SearchClicksForOutboundMessagesError, ThrowOnError>({
        ...options,
        url: '/messages/outbound/clicks'
    });
};

/**
 * Retrieve Message Clicks
 */
export const getClicksForSingleOutboundMessage = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetClicksForSingleOutboundMessageData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetClicksForSingleOutboundMessageResponse, GetClicksForSingleOutboundMessageError, ThrowOnError>({
        ...options,
        url: '/messages/outbound/clicks/{messageid}'
    });
};

/**
 * Send an email using a Template
 */
export const sendEmailWithTemplate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SendEmailWithTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).post<SendEmailWithTemplateResponse, SendEmailWithTemplateError, ThrowOnError>({
        ...options,
        url: '/email/withTemplate'
    });
};

/**
 * Send a batch of email using templates.
 */
export const sendEmailBatchWithTemplates = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SendEmailBatchWithTemplatesData, ThrowOnError>) => {
    return (options?.client ?? client).post<SendEmailBatchWithTemplatesResponse, SendEmailBatchWithTemplatesError, ThrowOnError>({
        ...options,
        url: '/email/batchWithTemplates'
    });
};

/**
 * Get the Templates associated with this Server
 */
export const listTemplates = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListTemplatesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListTemplatesResponse, ListTemplatesError, ThrowOnError>({
        ...options,
        url: '/templates'
    });
};

/**
 * Create a Template
 */
export const postTemplates = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostTemplatesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTemplatesResponse, PostTemplatesError, ThrowOnError>({
        ...options,
        url: '/templates'
    });
};

/**
 * Get a Template
 */
export const getSingleTemplate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetSingleTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSingleTemplateResponse, GetSingleTemplateError, ThrowOnError>({
        ...options,
        url: '/templates/{templateIdOrAlias}'
    });
};

/**
 * Update a Template
 */
export const updateTemplate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateTemplateResponse, UpdateTemplateError, ThrowOnError>({
        ...options,
        url: '/templates/{templateIdOrAlias}'
    });
};

/**
 * Delete a Template
 */
export const deleteTemplate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteTemplateResponse, DeleteTemplateError, ThrowOnError>({
        ...options,
        url: '/templates/{templateIdOrAlias}'
    });
};

/**
 * Test Template Content
 */
export const testTemplateContent = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TestTemplateContentData, ThrowOnError>) => {
    return (options?.client ?? client).post<TestTemplateContentResponse, TestTemplateContentError, ThrowOnError>({
        ...options,
        url: '/templates/validate'
    });
};

/**
 * Get outbound overview
 */
export const getOutboundOverviewStatistics = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetOutboundOverviewStatisticsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOutboundOverviewStatisticsResponse, GetOutboundOverviewStatisticsError, ThrowOnError>({
        ...options,
        url: '/stats/outbound'
    });
};

/**
 * Get sent counts
 */
export const getSentCounts = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetSentCountsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSentCountsResponse, GetSentCountsError, ThrowOnError>({
        ...options,
        url: '/stats/outbound/sends'
    });
};

/**
 * Get bounce counts
 */
export const getBounceCounts = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetBounceCountsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBounceCountsResponse, GetBounceCountsError, ThrowOnError>({
        ...options,
        url: '/stats/outbound/bounces'
    });
};

/**
 * Get spam complaints
 */
export const getSpamComplaints = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetSpamComplaintsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSpamComplaintsResponse, GetSpamComplaintsError, ThrowOnError>({
        ...options,
        url: '/stats/outbound/spam'
    });
};

/**
 * Get tracked email counts
 */
export const getTrackedEmailCounts = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetTrackedEmailCountsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTrackedEmailCountsResponse, GetTrackedEmailCountsError, ThrowOnError>({
        ...options,
        url: '/stats/outbound/tracked'
    });
};

/**
 * Get email open counts
 */
export const getOutboundOpenCounts = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetOutboundOpenCountsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOutboundOpenCountsResponse, GetOutboundOpenCountsError, ThrowOnError>({
        ...options,
        url: '/stats/outbound/opens'
    });
};

/**
 * Get email platform usage
 */
export const getOutboundOpenCountsByPlatform = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetOutboundOpenCountsByPlatformData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOutboundOpenCountsByPlatformResponse, GetOutboundOpenCountsByPlatformError, ThrowOnError>({
        ...options,
        url: '/stats/outbound/opens/platforms'
    });
};

/**
 * Get email client usage
 */
export const getOutboundOpenCountsByEmailClient = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetOutboundOpenCountsByEmailClientData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOutboundOpenCountsByEmailClientResponse, GetOutboundOpenCountsByEmailClientError, ThrowOnError>({
        ...options,
        url: '/stats/outbound/opens/emailclients'
    });
};

/**
 * Get click counts
 */
export const getOutboundClickCounts = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetOutboundClickCountsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOutboundClickCountsResponse, GetOutboundClickCountsError, ThrowOnError>({
        ...options,
        url: '/stats/outbound/clicks'
    });
};

/**
 * Get browser usage by family
 */
export const getOutboundClickCountsByBrowserFamily = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetOutboundClickCountsByBrowserFamilyData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOutboundClickCountsByBrowserFamilyResponse, GetOutboundClickCountsByBrowserFamilyError, ThrowOnError>({
        ...options,
        url: '/stats/outbound/clicks/browserfamilies'
    });
};

/**
 * Get browser plaform usage
 */
export const getOutboundClickCountsByPlatform = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetOutboundClickCountsByPlatformData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOutboundClickCountsByPlatformResponse, GetOutboundClickCountsByPlatformError, ThrowOnError>({
        ...options,
        url: '/stats/outbound/clicks/platforms'
    });
};

/**
 * Get clicks by body location
 */
export const getOutboundClickCountsByLocation = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetOutboundClickCountsByLocationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOutboundClickCountsByLocationResponse, GetOutboundClickCountsByLocationError, ThrowOnError>({
        ...options,
        url: '/stats/outbound/clicks/location'
    });
};

/**
 * List inbound rule triggers
 */
export const listInboundRules = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListInboundRulesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListInboundRulesResponse, ListInboundRulesError, ThrowOnError>({
        ...options,
        url: '/triggers/inboundrules'
    });
};

/**
 * Create an inbound rule trigger
 */
export const createInboundRule = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateInboundRuleData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateInboundRuleResponse, CreateInboundRuleError, ThrowOnError>({
        ...options,
        url: '/triggers/inboundrules'
    });
};

/**
 * Delete a single trigger
 */
export const deleteInboundRule = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteInboundRuleData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteInboundRuleResponse, DeleteInboundRuleError, ThrowOnError>({
        ...options,
        url: '/triggers/inboundrules/{triggerid}'
    });
};

/**
 * Get Server Configuration
 */
export const getCurrentServerConfiguration = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetCurrentServerConfigurationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCurrentServerConfigurationResponse, GetCurrentServerConfigurationError, ThrowOnError>({
        ...options,
        url: '/server'
    });
};

/**
 * Edit Server Configuration
 */
export const editCurrentServerConfiguration = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<EditCurrentServerConfigurationData, ThrowOnError>) => {
    return (options?.client ?? client).put<EditCurrentServerConfigurationResponse, EditCurrentServerConfigurationError, ThrowOnError>({
        ...options,
        url: '/server'
    });
};